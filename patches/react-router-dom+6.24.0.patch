diff --git a/node_modules/react-router-dom/dist/index.d.ts b/node_modules/react-router-dom/dist/index.d.ts
index 07aac84..9b8497b 100644
--- a/node_modules/react-router-dom/dist/index.d.ts
+++ b/node_modules/react-router-dom/dist/index.d.ts
@@ -202,6 +202,7 @@ export declare const Form: React.ForwardRefExoticComponent<FormProps & React.Ref
 export interface ScrollRestorationProps {
     getKey?: GetScrollRestorationKeyFunction;
     storageKey?: string;
+    elementRef?: React.RefObject<HTMLElement>;
 }
 /**
  * This component will emulate the browser's scroll restoration on location
@@ -291,6 +292,7 @@ export declare function useFetchers(): (Fetcher & {
 declare function useScrollRestoration({ getKey, storageKey, }?: {
     getKey?: GetScrollRestorationKeyFunction;
     storageKey?: string;
+    elementRef?: React.RefObject<HTMLElement>;
 }): void;
 export { useScrollRestoration as UNSAFE_useScrollRestoration };
 /**
diff --git a/node_modules/react-router-dom/dist/index.js b/node_modules/react-router-dom/dist/index.js
index 9bef12f..85224e3 100644
--- a/node_modules/react-router-dom/dist/index.js
+++ b/node_modules/react-router-dom/dist/index.js
@@ -934,11 +934,13 @@ if (process.env.NODE_ENV !== "production") {
 function ScrollRestoration(_ref10) {
   let {
     getKey,
-    storageKey
+    storageKey,
+    elementRef
   } = _ref10;
   useScrollRestoration({
     getKey,
-    storageKey
+    storageKey,
+    elementRef
   });
   return null;
 }
@@ -1231,13 +1233,31 @@ function useFetchers() {
 }
 const SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
 let savedScrollPositions = {};
+
+const getScrollTarget = (elementRef) =>
+  elementRef ? elementRef.current : window;
+
+const getScrollY = (elementRef) => {
+  const el = getScrollTarget(elementRef);
+  // window has scrollY but normal elements have scrollTop
+  return !el ? 0 : el.scrollY || el.scrollTop;
+}
+
+const scrollY = (elementRef, y) => {
+  const el = getScrollTarget(elementRef);
+  if (el) {
+    el.scrollTo(0, y);
+  }
+}
+
 /**
  * When rendered inside a RouterProvider, will restore scroll positions on navigations
  */
 function useScrollRestoration(_temp4) {
   let {
     getKey,
-    storageKey
+    storageKey,
+    elementRef
   } = _temp4 === void 0 ? {} : _temp4;
   let {
     router
@@ -1263,7 +1283,7 @@ function useScrollRestoration(_temp4) {
   usePageHide(React.useCallback(() => {
     if (navigation.state === "idle") {
       let key = (getKey ? getKey(location, matches) : null) || location.key;
-      savedScrollPositions[key] = window.scrollY;
+      savedScrollPositions[key] = getScrollY(elementRef);
     }
     try {
       sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));
@@ -1271,7 +1291,7 @@ function useScrollRestoration(_temp4) {
       process.env.NODE_ENV !== "production" ? UNSAFE_warning(false, "Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (" + error + ").") : void 0;
     }
     window.history.scrollRestoration = "auto";
-  }, [storageKey, getKey, navigation.state, location, matches]));
+  }, [storageKey, getKey, elementRef, navigation.state, location, matches]));
   // Read in any saved scroll locations
   if (typeof document !== "undefined") {
     // eslint-disable-next-line react-hooks/rules-of-hooks
@@ -1292,9 +1312,9 @@ function useScrollRestoration(_temp4) {
       _extends({}, location, {
         pathname: stripBasename(location.pathname, basename) || location.pathname
       }), matches) : getKey;
-      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);
+      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => getScrollY(elementRef), getKeyWithoutBasename);
       return () => disableScrollRestoration && disableScrollRestoration();
-    }, [router, basename, getKey]);
+    }, [router, basename, getKey, elementRef]);
     // Restore scrolling when state.restoreScrollPosition changes
     // eslint-disable-next-line react-hooks/rules-of-hooks
     React.useLayoutEffect(() => {
@@ -1304,7 +1324,7 @@ function useScrollRestoration(_temp4) {
       }
       // been here before, scroll to it
       if (typeof restoreScrollPosition === "number") {
-        window.scrollTo(0, restoreScrollPosition);
+        setTimeout(() => scrollY(elementRef, restoreScrollPosition), 1); // Timeout is required for our scenario
         return;
       }
       // try to scroll to the hash
@@ -1320,8 +1340,8 @@ function useScrollRestoration(_temp4) {
         return;
       }
       // otherwise go to the top on new locations
-      window.scrollTo(0, 0);
-    }, [location, restoreScrollPosition, preventScrollReset]);
+      scrollY(elementRef, 0);
+    }, [location, restoreScrollPosition, preventScrollReset, elementRef]);
   }
 }
 /**
