# Manual Release Workflow (Orchestrator)
#
# This workflow orchestrates both web and desktop releases when triggered.
# It runs semantic-release once and then calls both release workflows.
#
# Role in release workflow:
# - Triggered by push to release branch or manual dispatch
# - Creates GitHub releases with semantic versioning once
# - Calls release-web.yaml for web deployment
# - Calls release-desktop.yaml for desktop app builds
# - Coordinates both releases to use same version

name: Release

on:
  push:
    branches:
      - release
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '.vscode/**'
  workflow_dispatch:
    inputs:
      production-release:
        description: 'Production release?'
        required: true
        default: 'true'

concurrency: orchestrate-release

env:
  PRODUCTION_RELEASE: ${{ github.ref_name == 'release' && (inputs.production-release == 'true' || inputs.production-release == '') }}

jobs:
  ci:
    name: CI
    uses: makerxstudio/shared-config/.github/workflows/node-ci.yml@main
    with:
      working-directory: .
      node-version: 20.x
      audit-script: npm run audit
      compile-script: npm run check-types
      test-script: npm run test
      pre-test-script: |
        pipx install algokit
        algokit localnet start
        npx --yes wait-on tcp:4001 -t 30000

  build-app:
    name: Build Application
    needs: ci
    runs-on: [ubuntu-22.04]
    steps:
      - name: Generate bot token
        uses: actions/create-github-app-token@v1
        id: app_token
        with:
          app-id: ${{ secrets.BOT_ID }}
          private-key: ${{ secrets.BOT_SK }}

      - uses: actions/checkout@v4
        with:
          token: ${{ steps.app_token.outputs.token }}
          fetch-depth: 0

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install npm dependencies
        run: npm install

      - name: Synchronize version to Cargo.toml and tauri.conf.json
        run: npm run sync-version

      - name: Create .env file with production values
        run: |
          cat > .env << EOF
          VITE_DISPENSER_AUTH0_DOMAIN=dispenser-prod.eu.auth0.com
          VITE_DISPENSER_AUTH0_CLIENT_ID=Cg13HjvSV45pMme4dnK9yVJde8tVeDaM
          VITE_DISPENSER_AUTH0_AUDIENCE=api-prod-dispenser-user
          VITE_TESTNET_DISPENSER_API_URL=https://api.dispenser.algorandfoundation.tools
          VITE_TESTNET_DISPENSER_ADDRESS=Z5GPJQCHVU54C2I4FLYNE2XHRQRL5OV2GPJQKXJFMW34CRIN2KRQFXF7DI
          EOF

      - name: Build application
        run: npm run build

      - name: Upload app build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: dist/
          retention-days: 1

  create-release:
    name: Create release
    needs: [ci, build-app]
    runs-on: [ubuntu-22.04]
    outputs:
      release-published: ${{ steps.create-github-release.outputs.release-published }}
      release-version: ${{ steps.create-github-release.outputs.release-version }}
      release-tag: ${{ steps.create-github-release.outputs.release-tag }}
      release-id: ${{ steps.create-github-release.outputs.release-id }}
      crabnebula-release-id: ${{ steps.get-crabnebula-release-id.outputs.release-id }}
    steps:
      - name: Generate bot token
        uses: actions/create-github-app-token@v1
        id: app_token
        with:
          app-id: ${{ secrets.BOT_ID }}
          private-key: ${{ secrets.BOT_SK }}

      - uses: actions/checkout@v4
        with:
          # Use bot token for authenticated operations
          token: ${{ steps.app_token.outputs.token }}
          fetch-depth: 0

      - name: Download app build artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-build
          path: dist/

      - name: Create GitHub release
        uses: ./.github/actions/create-release
        id: create-github-release
        with:
          # Use bot token for semantic-release operations
          github-token: ${{ steps.app_token.outputs.token }}
          production-release: ${{ env.PRODUCTION_RELEASE }}
          node-version: 20

      - name: Create draft CrabNebula release
        uses: crabnebula-dev/cloud-release@v0.2.0
        id: create-crabnebula-release
        if: ${{ steps.create-github-release.outputs.release-published == 'true' }}
        with:
          command: release draft ${{ secrets.CN_ORG_NAME }}/${{ secrets.CN_APP_NAME }} ${{ steps.create-github-release.outputs.release-version }} ${{ env.PRODUCTION_RELEASE != 'true' && '--channel beta' || '' }}
          api-key: ${{ secrets.CN_API_KEY }}

      - name: Get CrabNebula release ID
        id: get-crabnebula-release-id
        if: ${{ steps.create-github-release.outputs.release-published == 'true' }}
        run: echo "release-id=${{ fromJson(steps.create-crabnebula-release.outputs.stdout).id }}" >> $GITHUB_OUTPUT

  release-web:
    name: Release Web
    needs: [ci, build-app, create-release]
    if: needs.create-release.outputs.release-published == 'true'
    uses: ./.github/workflows/release-web.yaml
    with:
      version: ${{ needs.create-release.outputs.release-version }}
    secrets: inherit

  release-desktop:
    name: Release Desktop
    needs: [ci, build-app, create-release]
    if: needs.create-release.outputs.release-published == 'true'
    uses: ./.github/workflows/release-desktop.yaml
    with:
      version: ${{ needs.create-release.outputs.release-version }}
      production-release: ${{ inputs.production-release || 'true' }}
      release-tag: ${{ needs.create-release.outputs.release-tag }}
      crabnebula-release-id: ${{ needs.create-release.outputs.crabnebula-release-id }}
    secrets: inherit
