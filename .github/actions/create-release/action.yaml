name: 'Create release'
description: 'Create a new release'
inputs:
  github-token:
    description: 'The GitHub token'
    required: true
  production-release:
    description: 'Is production release?'
    required: true
  node-version:
    description: 'The Node version'
    required: true
    default: '20'
outputs:
  release-published:
    description: 'If the release was published'
    value: ${{ steps.get-next-version.outputs.new-release-published }}
  release-version:
    description: 'The new release version'
    value: ${{ steps.get-next-version.outputs.new-release-version }}
  release-tag:
    description: 'The new release tag'
    value: ${{ steps.get-release-tag.outputs.release-tag }}
  release-id:
    description: 'The new release ID'
    value: ${{ steps.get-release-id.outputs.result }}

runs:
  using: 'composite'
  steps:
    - name: Setup node
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: Install npm dependencies
      run: npm install
      shell: bash

    - name: Get next version (dry run)
      id: get-next-version
      run: npx semantic-release --dry-run ${{ inputs.production-release == 'true' && '--branches main' || '' }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      shell: bash

    - name: Create release ${{ inputs.production-release == 'true' && '' || 'beta' }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: npx semantic-release ${{ inputs.production-release == 'true' && '--branches main' || '' }}
      shell: bash

    - name: Get release tag
      id: get-release-tag
      shell: bash
      run: |
        echo "release-tag=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_OUTPUT

    - name: Get release ID
      id: get-release-id
      uses: actions/github-script@v7
      if: steps.get-next-version.outputs.new-release-published == 'true'
      with:
        script: |
          const { data } = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: "${{ steps.get-next-version.outputs.new-release-git-tag }}"
          })
          return data.id
