name: 'Build for Windows'
description: 'Build for Windows'
inputs:
  production-release:
    description: 'Production release?'
    required: true
  release-version:
    description: 'The release version'
  package_name:
    description: 'The name of the package'
    required: true
  azure_tenant_id:
    description: ''
    required: true
  azure_client_id:
    description: ''
    required: true
  azure_client_secret:
    description: ''
    required: true

runs:
  using: 'composite'
  steps:
    - name: Get artifact name
      id: set-env
      run: |
        echo "artifact_name=algokit-lora-windows-${{ runner.arch }}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Bump version in tauri.conf.json and Cargo.toml
      if: ${{ inputs.release-version != '' }}
      run: |
        version="${{ inputs.release-version }}"
        sed -i "s/\"version\": \"0.0.0\"/\"version\": \"$version\"/g" "src-tauri/tauri.conf.json"
        sed -i "s/version = \"0.0.0\"/version = \"$version\"/g" "src-tauri/Cargo.toml"
      shell: bash

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Update Cargo.lock
      run: cargo update
      shell: bash

    # This step is just seting up the trusted signing action and it is expected to fail.
    # It is needed later on sign the executable step.
    - name: Initialize sign executable
      uses: azure/trusted-signing-action@v0.3.20
      continue-on-error: true
      with:
        azure-tenant-id: ${{ inputs.azure_tenant_id }}
        azure-client-id: ${{ inputs.azure_client_id }}
        azure-client-secret: ${{ inputs.azure_client_secret }}

    - name: Configure signing for tauri
      shell: bash
      env:
        # This is used to sign the executable using the azure trusted signing before tauri build command.
        BEFORE_BUNDLE_COMMAND: pwsh -command Invoke-TrustedSigning -Endpoint 'https://weu.codesigning.azure.net/' -CodeSigningAccountName 'algokit-signing' -CertificateProfileName 'algokit'  -FilesFolder '${{ github.workspace }}\src-tauri\target\release\deps\' -FilesFolderFilter 'exe' -FileDigest 'SHA256' -timeout '1200' -TimestampRfc3161 'http://timestamp.acs.microsoft.com' -TimestampDigest 'SHA256'
      run: |
        cd "$GITHUB_WORKSPACE"
        cat './src-tauri/tauri.conf.json' | jq '.build += {"beforeBundleCommand": env.BEFORE_BUNDLE_COMMAND}' > './src-tauri/temp.json' && mv './src-tauri/temp.json' './src-tauri/tauri.conf.json'

    - name: Build tauri app
      env:
        AZURE_TENANT_ID: ${{ inputs.azure_tenant_id }}
        AZURE_CLIENT_ID: ${{ inputs.azure_client_id }}
        AZURE_CLIENT_SECRET: ${{ inputs.azure_client_secret }}
      run: |
        npm run tauri build
      shell: pwsh

    - name: Sign the installer
      uses: azure/trusted-signing-action@v0.3.20
      with:
        azure-tenant-id: ${{ inputs.azure_tenant_id }}
        azure-client-id: ${{ inputs.azure_client_id }}
        azure-client-secret: ${{ inputs.azure_client_secret }}
        endpoint: https://weu.codesigning.azure.net/
        trusted-signing-account-name: algokit-signing
        certificate-profile-name: algokit
        files-folder: ${{ github.workspace }}\src-tauri\target\release\bundle\msi\
        files-folder-filter: msi
        file-digest: SHA256
        timestamp-rfc3161: http://timestamp.acs.microsoft.com
        timestamp-digest: SHA256

    - name: Upload msi as artifact
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: ${{ steps.set-env.outputs.artifact_name }}
        path: ${{ github.workspace }}\src-tauri\target\release\bundle\msi\algokit-lora*.msi
