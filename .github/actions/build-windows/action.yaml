name: 'Build for Windows'
description: 'Build for Windows'
inputs:
  production-release:
    description: 'Whether this is a production release'
    required: true
  release-version:
    description: 'The release version'
    required: true
  release-tag:
    description: 'The release tag'
    required: true
  crabnebula-release-id:
    description: 'The CrabNebula release ID'
    required: true
  azure_tenant_id:
    description: 'The Microsoft Entra tenant (directory) ID.'
    required: true
  azure_client_id:
    description: 'The client (application) ID of an App Registration in the tenant.'
    required: true
  azure_client_secret:
    description: 'A client secret that was generated for the App Registration.'
    required: true
  tauri-signing-private-key:
    description: 'The Tauri signing private key'
    required: true
  tauri-signing-private-key-password:
    description: 'The Tauri signing private key password'
    required: true
  tauri-signing-public-key:
    description: 'The Tauri signing public key'
    required: true
  crabnebula-org-name:
    description: 'The CrabNebula org name'
    required: true
  crabnebula-app-name:
    description: 'The CrabNebula app name'
    required: true
  crabnebula-api-key:
    description: 'The CrabNebula API key'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Setup tauri.conf.json
      if: ${{ inputs.release-version != '' }}
      run: |
        input_version="${{ inputs.release-version }}"
        version="${input_version/beta./""}"
        sed -i "s/\"version\": \"0.1.0\"/\"version\": \"$version\"/g" "src-tauri/tauri.conf.json"
        sed -i "s/\"createUpdaterArtifacts\": false/\"createUpdaterArtifacts\": true/g" "src-tauri/tauri.conf.json"
        sed -i "s/CN_ORG_NAME/${{ inputs.crabnebula-org-name }}/g" "src-tauri/tauri.conf.json"
        sed -i "s/CN_APP_NAME/${{ inputs.crabnebula-app-name }}/g" "src-tauri/tauri.conf.json"
        sed -i "s/CN_CHANNEL/${{ inputs.production-release != 'true' && '?channel=beta' || '' }}/g" "src-tauri/tauri.conf.json"
        sed -i "s/TAURI_SIGNING_PUBLIC_KEY/${{ inputs.tauri-signing-public-key }}/g" "src-tauri/tauri.conf.json"
      shell: bash

    # Create a dummy file to sign, so we can install the signing tools without any errors
    - name: Create a dummy file to sign
      run: |
        mkdir -p ./dummy
        echo 'console.log("This is a dummy JavaScript file.");' > ./dummy/dummy.js
      shell: bash

    # This step is setting up the trusted signing action to sign a dummy file.
    # Used in later steps to sign the tauri binary.
    - name: Initialise environment for code signing
      uses: azure/trusted-signing-action@v0.3.20
      continue-on-error: true
      with:
        azure-tenant-id: ${{ inputs.azure_tenant_id }}
        azure-client-id: ${{ inputs.azure_client_id }}
        azure-client-secret: ${{ inputs.azure_client_secret }}
        endpoint: https://weu.codesigning.azure.net/
        trusted-signing-account-name: algokit-signing
        certificate-profile-name: algokit
        files-folder: ./dummy
        files-folder-filter: js
        file-digest: SHA256
        timestamp-rfc3161: http://timestamp.acs.microsoft.com
        timestamp-digest: SHA256

    - name: Configure signing for tauri
      shell: bash
      env:
        # This is used to sign the executable using the azure trusted signing before tauri build command.
        BEFORE_BUNDLE_COMMAND: pwsh -command Invoke-TrustedSigning -Endpoint 'https://weu.codesigning.azure.net/' -CodeSigningAccountName 'algokit-signing' -CertificateProfileName 'algokit' -FilesFolder '${{ github.workspace }}\src-tauri\target\release\deps\' -FilesFolderFilter 'exe' -FileDigest 'SHA256' -timeout '1200' -TimestampRfc3161 'http://timestamp.acs.microsoft.com' -TimestampDigest 'SHA256'
      run: |
        cd "$GITHUB_WORKSPACE"
        cat './src-tauri/tauri.conf.json' | jq '.build += {"beforeBundleCommand": env.BEFORE_BUNDLE_COMMAND}' > './src-tauri/temp.json' && mv './src-tauri/temp.json' './src-tauri/tauri.conf.json'

    - name: Build tauri app
      env:
        AZURE_TENANT_ID: ${{ inputs.azure_tenant_id }}
        AZURE_CLIENT_ID: ${{ inputs.azure_client_id }}
        AZURE_CLIENT_SECRET: ${{ inputs.azure_client_secret }}
        TAURI_SIGNING_PRIVATE_KEY: ${{ inputs.tauri-signing-private-key }}
        TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ inputs.tauri-signing-private-key-password }}
      run: |
        npm run tauri build
      shell: pwsh

    - name: Sign the installer
      uses: azure/trusted-signing-action@v0.3.20
      with:
        azure-tenant-id: ${{ inputs.azure_tenant_id }}
        azure-client-id: ${{ inputs.azure_client_id }}
        azure-client-secret: ${{ inputs.azure_client_secret }}
        endpoint: https://weu.codesigning.azure.net/
        trusted-signing-account-name: algokit-signing
        certificate-profile-name: algokit
        files-folder: ${{ github.workspace }}\src-tauri\target\release\bundle\msi\
        files-folder-filter: msi
        file-digest: SHA256
        timestamp-rfc3161: http://timestamp.acs.microsoft.com
        timestamp-digest: SHA256

    - name: Upload artifacts to release
      uses: softprops/action-gh-release@v1
      with:
        fail_on_unmatched_files: true
        files: |
          src-tauri/target/release/bundle/msi/algokit-lora*.msi
          src-tauri/target/release/bundle/nsis/algokit-lora*.exe
        tag_name: ${{ inputs.release-tag }}
        prerelease: ${{ inputs.production-release != 'true' }}

    - name: Upload artifacts to CrabNebula
      uses: crabnebula-dev/cloud-release@v0.2.0
      with:
        command: release upload "${{ inputs.crabnebula-org-name }}/${{ inputs.crabnebula-app-name }}" "${{ inputs.crabnebula-release-id }}" --framework tauri ${{ inputs.production-release != 'true' && '--channel beta' || '' }}
        api-key: ${{ inputs.crabnebula-api-key }}
